<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= post.title %>
    </title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .loader {
            width: 48px;
            height: 48px;
            border: 5px solid #FFF;
            border-bottom-color: #3B82F6;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        @keyframes rotation {
            0% {
                transform: translate(-50%, -50%) rotate(0deg);
            }

            100% {
                transform: translate(-50%, -50%) rotate(360deg);
            }
        }

        .post-container {
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
        }

        /* Dark mode toggle styles */
        .dark-mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 60px;
            height: 34px;
            z-index: 100;
        }

        .dark-mode-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "‚òÄÔ∏è";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 15px;
        }

        input:checked+.slider {
            background-color: #2196F3;
        }

        input:checked+.slider:before {
            transform: translateX(26px);
            content: "üåô";
        }

        /* Dark mode styles */
        .dark-mode {
            background-color: #1a1a1a;
        }

        .dark-mode .post-container {
            background-color: #1a1a1a;
        }

        .dark-mode .main-card {
            background-color: #2d2d2d;
        }

        .dark-mode .post-section {
            background-color: #3d3d3d;
        }

        .dark-mode h1 {
            color: #ffffff;
        }

        .dark-mode h2 {
            color: #e5e5e5;
        }

        .dark-mode p {
            color: #d1d1d1;
        }

        .dark-mode .text-gray-500 {
            color: #a0aec0;
        }

        .dark-mode .text-gray-600 {
            color: #e2e8f0;
        }

        .dark-mode .text-gray-700 {
            color: #f0f4f8;
        }

        .dark-mode .text-gray-900 {
            color: #ffffff;
        }

        .dark-mode .border-t {
            border-color: #4a4a4a;
        }

        .dark-mode .back-button {
            background-color: #3B82F6;
            color: white;
        }

        .dark-mode .back-button:hover {
            background-color: #2563EB;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .animated-section {
            opacity: 0;
            animation: slideIn 0.8s ease-out forwards;
        }

        .reaction-button {
            cursor: pointer;
            transition: transform 0.2s;
        }

        .reaction-button:hover {
            transform: scale(1.2);
        }

        .reaction-count {
            margin-left: 8px;
            font-size: 14px;
            color: #555;
        }

        .dark-mode .comment {
            color: #ffffff;
        }

        .dark-mode .reaction-button {
            color: #ffffff;
        }

        .dark-mode .reaction-count {
            color: #ffffff;
        }

        .comment {
            position: relative;
        }

        .delete-comment-button {
            position: absolute;
            right: 0;
            top: 0;
            cursor: pointer;
            color: red;
            font-size: 12px;
        }
    </style>
</head>

<body class="bg-gray-50 min-h-screen transition-colors duration-300">
    <div class="loader"></div>

    <div class="post-container max-w-4xl mx-auto px-4 py-8">
        <label class="dark-mode-toggle">
            <input type="checkbox" onchange="toggleDarkMode()">
            <span class="slider"></span>
        </label>

        <div class="main-card bg-white rounded-lg shadow-lg p-8 mb-8 transition-colors duration-300">
            <h1 class="text-4xl font-bold text-gray-900 mb-6 transition-colors duration-300">
                <%= post.title %>
            </h1>

            <div class="post-section bg-gray-50 rounded-lg p-6 mb-6 transition-colors duration-300 animated-section">
                <div class="mb-4">
                    <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Topic</h2>
                    <p class="text-gray-600 transition-colors duration-300">
                        <%= post.topic %>
                    </p>
                </div>

                <div class="mb-4">
                    <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Content</h2>
                    <p class="text-gray-600 leading-relaxed transition-colors duration-300">
                        <%= post.content %>
                    </p>
                    <p class="text-gray-600 leading-relaxed mt-4 transition-colors duration-300">
                        <%= post.secondParagraph %>
                    </p>
                    <p class="text-gray-600 leading-relaxed mt-4 transition-colors duration-300">
                        <%= post.thirdParagraph %>
                    </p>
                </div>

                <div class="mb-4">
                    <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Key Points</h2>
                    <p class="text-gray-600 transition-colors duration-300">
                        <%= post.bulletPoints %>
                    </p>
                </div>

                <div class="mb-4">
                    <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Summary</h2>
                    <p class="text-gray-600 transition-colors duration-300">
                        <%= post.summary %>
                    </p>
                </div>
            </div>

            <!-- New Comments Section -->
            <div class="post-section bg-gray-50 rounded-lg p-6 mb-6 transition-colors duration-300 animated-section">
                <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Comments</h2>
                <div id="comments" class="comment">
                    <!-- Comments will be dynamically inserted here -->
                </div>
                <textarea id="comment-input" class="w-full p-2 border rounded mt-4"
                    placeholder="Add a comment..."></textarea>
                <button onclick="addComment()" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded">Submit</button>
            </div>

            <!-- New Reactions Section -->
            <div class="post-section bg-gray-50 rounded-lg p-6 mb-6 transition-colors duration-300 animated-section">
                <h2 class="text-xl font-semibold text-gray-700 mb-2 transition-colors duration-300">Reactions</h2>
                <div class="flex space-x-4">
                    <span class="reaction-button" onclick="react('like')">üëç<span id="like-count"
                            class="reaction-count">0</span></span>
                    <span class="reaction-button" onclick="react('love')">‚ù§Ô∏è<span id="love-count"
                            class="reaction-count">0</span></span>
                    <span class="reaction-button" onclick="react('laugh')">üòÇ<span id="laugh-count"
                            class="reaction-count">0</span></span>
                    <span class="reaction-button" onclick="react('surprised')">üòÆ<span id="surprised-count"
                            class="reaction-count">0</span></span>
                    <span class="reaction-button" onclick="react('sad')">üò¢<span id="sad-count"
                            class="reaction-count">0</span></span>
                </div>
            </div>

            <div class="border-t pt-6 transition-colors duration-300">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-gray-500 transition-colors duration-300">Author</p>
                        <p class="text-gray-900 font-medium transition-colors duration-300">
                            <%= post.name %>
                        </p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500 transition-colors duration-300">Email</p>
                        <p class="text-gray-900 font-medium transition-colors duration-300">
                            <%= post.userEmail %>
                        </p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500 transition-colors duration-300">Created At</p>
                        <p class="text-gray-900 font-medium transition-colors duration-300">
                            <%= post.createdAt.toLocaleString() %>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <a href="/"
            class="back-button inline-flex items-center px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300">
            <i class="fas fa-arrow-left mr-2"></i>
            Back to Home
        </a>
    </div>

    <script>
        const postId = '<%= post._id %>'; // Assuming post._id is available
        let userReaction = null; // Track the user's current reaction

        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            document.querySelector('.post-container').classList.toggle('dark-mode');
            document.querySelector('.main-card').classList.toggle('dark-mode');
            const sections = document.querySelectorAll('.post-section');
            sections.forEach(section => section.classList.toggle('dark-mode'));
        }

        async function addComment() {
            const commentInput = document.getElementById('comment-input');
            const commentText = commentInput.value;
            if (commentText.trim()) {
                const response = await fetch('/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ postId, text: commentText })
                });
                const comment = await response.json();
                const commentDiv = document.createElement('div');
                commentDiv.className = 'p-2 border-b comment';
                commentDiv.innerHTML = `<strong>${comment.userName}:</strong> ${comment.text} <span class="delete-comment-button" onclick="deleteComment('${comment._id}')">Delete</span>`;
                document.getElementById('comments').appendChild(commentDiv);
                commentInput.value = '';
            }
        }

        async function deleteComment(commentId) {
            const response = await fetch(`/comments/${commentId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                document.getElementById(commentId).remove();
            } else {
                console.error('Error deleting comment');
            }
        }

        async function react(type) {
            const response = await fetch('/reactions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ postId, type })
            });
            const reaction = await response.json();

            // Update the reaction counts
            document.getElementById(`${type}-count`).textContent = reaction.count;

            // If the user had a previous reaction, decrement its count
            if (userReaction && userReaction !== type) {
                const prevReactionCount = document.getElementById(`${userReaction}-count`);
                prevReactionCount.textContent = parseInt(prevReactionCount.textContent) - 1;
            }

            // Update the user's current reaction
            userReaction = type;
        }

        async function loadReactions() {
            const response = await fetch(`/reactions/${postId}`);
            const reactions = await response.json();
            reactions.forEach(reaction => {
                document.getElementById(`${reaction.type}-count`).textContent = reaction.count;
                if (reaction.userEmail === "<%= user ? user.email : '' %>") {
                    userReaction = reaction.type;
                }
            });
        }

        async function loadComments() {
            const response = await fetch(`/comments/${postId}`);
            const comments = await response.json();
            comments.forEach(comment => {
                const commentDiv = document.createElement('div');
                commentDiv.className = 'p-2 border-b comment';
                commentDiv.id = comment._id;
                commentDiv.innerHTML = `<strong>${comment.userName}:</strong> ${comment.text} ${comment.userEmail === "<%= user ? user.email : '' %>" ? '<span class="delete-comment-button" onclick="deleteComment(\'' + comment._id + '\')">Delete</span>' : ''
                    }`;
                document.getElementById('comments').appendChild(commentDiv);
            });
        }

        window.onload = function () {
            document.querySelector('.post-container').style.opacity = 1;
            document.querySelector('.loader').style.display = 'none';
            const animatedSections = document.querySelectorAll('.animated-section');
            animatedSections.forEach((section, index) => {
                setTimeout(() => {
                    section.style.opacity = 1;
                }, index * 200);
            });
            loadComments();
            loadReactions();
        };
    </script>
</body>

</html>